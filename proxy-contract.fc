{-

Прокси смарт-контракт, обладает следующей функциональностью:

- Пересылка всех сообщений поступающих в контракт владельцу;
- При пересылке сначала должен идти адрес отправителя, а потом тело сообщения
- Значение Toncoin, прикрепленное к сообщению, должно быть равно значению входящего сообщения за вычетом сборов, связанных с обработкой (плата за вычисления и пересылку сообщения)
- Адрес владельца хранится в хранилище смарт-контракта
- При отправке сообщения в контракт от владельца пересылка не должна осуществляться

-}


;; функция, которая вытаскивает адрес отправителя

slice parse_sender_address (cell in_msg_full) inline {

    var cs = in_msg_full.begin_parse(); ;; преобразуем ячейку в слайс

    var flags = cs~load_uint(4); ;; "вычитаем" флаги

    slice sender_address = cs~load_msg_addr(); ;; загружаем адрес из слайса

    return sender_address;

}


;; функция, которая вытаскивает адрес получателя из ячейки с4 смарта

slice load_data() inline {

    ;; get_data() берет ячейку с4, а begin_parse() преобразует ее в слайс
    var ds = get_data().begin_parse();

    ;; загружаем из слайса префикс MsgAddress
    return ds~load_msg_addr();
}


;; Теперь делаем функцию, которая сравнит адрес получателя и отправителя
;; FunC поддерживает определение функции на ассемблере (Fift)
;; Мы определяем функцию как низкоуровневый примтив Ton Virtual Machine
;; Список примитивов (то, что после "asm") берем с 77 страницы TVM


;; для приема сообщений используем внешний метод
;;
;; При инициализации транзакции, в стеке 5 элементов:
;;
;; Баланс смарт-контракта(в наноТонах)
;; Баланс входящего сообщения (в наноТонах)
;; Ячейка с входящим сообщеним
;; Тело входящего сообщения, тип слайс
;; Селектор функции (для recv_internal это 0)

() recv_internal (int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    ;; берем адрес из ячейки с сообщением и вызываем для этого функцию:
    slice sender_address = parse_sender_address(in_msg_full);

    ;; вызываем функцию получения адреса получателя
    slice owner_address = load_data();

    ;; используем функцию сравнения адресов, чтобы не слать самим себе
    ;; унарный оператор "~" позволяет проверить неравенство

    if ~ equal_slices (sender_address, owner_address) {

        cell msg_body_cell = begin_cell().store_slice(in_msg_body).end_cell();
        
        
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_grams(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_slice(sender_address)
            .store_ref(msg_body_cell)
            .end_cell();

        send_raw_message(msg, 64);
    }

}