;; 
;; Storage
;;
;; owner MsgAddress
;; proxy_code Cell
;; proxy_data Cell
;; 

(slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner
        ds~load_ref(), ;; proxy_code
        ds~load_ref() ;; proxy_data
    );
}

() save_data(slice owner, cell proxy_code, cell proxy_data) {
    set_data(
        begin_cell()
            .store_slice(owner)
            .store_ref(proxy_code)
            .store_ref(proxy_data)
        .end_cell()
    );
}

cell pack_proxy_data(int balance, slice owner, cell proxy_code) inline {
   return  begin_cell()
            .store_coins(balance)
            .store_slice(owner)
            .store_ref(proxy_code)
           .end_cell();
}

cell calculate_proxy_init(slice owner, cell proxy_code) inline {
  return begin_cell()
          .store_uint(0x6, 5)
          .store_dict(proxy_code)
          .store_dict(pack_proxy_data(0, owner, proxy_code))
         .end_cell();
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    int amount = in_msg_body~load_coins();

    (slice owner, cell proxy_code, cell proxy_data) = load_data();

    cell state_init = calculate_proxy_init(owner, proxy_code);

    int state_init_hash = cell_hash(state_init);

    slice dest_address = 
        begin_cell()
            .store_int(0, 8)
            .store_uint(state_init_hash, 256)
        .end_cell()
        .begin_parse();

    cell body = 
        begin_cell()
            .store_slice(in_msg_body)
        .end_cell();

    var msg = 
        begin_cell()
            .store_uint(0x18, 6)
            .store_uint(4, 3).store_slice(dest_address)
            .store_grams(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(body)
        .end_cell();

    send_raw_message(msg, 1); ;; paying fees, revert on errors

}

() recv_external(slice in_msg) impure {

}

